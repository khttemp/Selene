

//-----------------------------------------------------------------------------------
// INCLUDE
//-----------------------------------------------------------------------------------
#include "Class/Common/Object/CBaseObject.h"


//-----------------------------------------------------------------------------------
// NAMESPACE
//-----------------------------------------------------------------------------------
using namespace Selene;


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CBaseObject::CBaseObject()
{
	m_RefCount		= 1;
	m_ChildCount	= 0;
	m_pPrev			= NULL;
	m_pNext			= NULL;
	m_pParent		= NULL;
	m_pChild		= NULL;
	m_pSibling		= NULL;
	m_Name[0]		= '\0';
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CBaseObject::~CBaseObject()
{
	// 自分が誰かの子供の時はリストから切り離す
	if ( m_pParent != NULL )
	{
		// 親の子供の数をデクリメント
		m_pParent->m_ChildCount--;

		// 親の直下の時
		if ( m_pParent->m_pChild == this )
		{
			// 後ろへ連結
			m_pParent->m_pChild = m_pSibling;
		}
		else
		{
			// リストから自分を検索
			CBaseObject *pObj = m_pParent->m_pChild;
			while ( pObj->m_pSibling != this )
			{
				pObj = pObj->m_pSibling;
			}

			// 後ろへ連結
			pObj->m_pSibling = m_pSibling;
		}
	}

	// 子供削除
	CBaseObject *pChild = m_pChild;
	while ( pChild != NULL )
	{
		pChild->m_pParent = NULL;
		pChild = pChild->m_pSibling;
	}

	m_ChildCount	= 0;
	m_pPrev			= NULL;
	m_pNext			= NULL;
	m_pParent		= NULL;
	m_pChild		= NULL;
	m_pSibling		= NULL;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Sint32 CBaseObject::AddRef( void )
{
	m_RefCount++;
	return m_RefCount;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Sint32 CBaseObject::GetRefCount( void )
{
	return m_RefCount;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Sint32 CBaseObject::Release( void )
{
	Sint32 Cnt = --m_RefCount;
	if ( Cnt == 0 )
	{
		delete this;
	}

	return Cnt;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Sint32 CBaseObject::GetChildCount( void )
{
	return m_ChildCount;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CBaseObject *CBaseObject::GetPrev( void )
{
	return m_pPrev;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CBaseObject *CBaseObject::GetNext( void )
{
	return m_pNext;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CBaseObject *CBaseObject::GetParent( void )
{
	return m_pParent;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CBaseObject *CBaseObject::GetChild( void )
{
	return m_pChild;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CBaseObject *CBaseObject::GetSibling( void )
{
	return m_pSibling;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CBaseObject::SetPrev( CBaseObject *pObj )
{
	m_pPrev = pObj;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CBaseObject::SetNext( CBaseObject *pObj )
{
	m_pNext = pObj;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CBaseObject::SetChild( CBaseObject *pObj )
{
	m_pChild = pObj;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CBaseObject::SetParent( CBaseObject *pObj )
{
	m_pParent = pObj;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CBaseObject::SetSibling( CBaseObject *pObj )
{
	m_pSibling = pObj;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CBaseObject::AddChild( CBaseObject *pChild )
{
	// 子供の数をインクリメント
	m_ChildCount++;

	// 子供がいない時
	if ( m_pChild == NULL )
	{
		m_pChild = pChild;
	}
	else
	{
		// 子供の連結リストに追加
		CBaseObject *pObj = m_pChild;
		while ( pObj->m_pSibling != NULL )
		{
			pObj = pObj->m_pSibling;
		}

		pObj->m_pSibling = pChild;
	}

	pChild->m_pParent = this;
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CBaseObject::SetName( const char *pName )
{
	StringCbCopy( m_Name, sizeof(m_Name), pName );
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CBaseObject::GetName( char *pName, Sint32 NameSize )
{
	StringCbCopy( pName, NameSize, m_Name );
}


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
const char *CBaseObject::GetNamePointer( void ) const
{
	return m_Name;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Bool CBaseObject::IsSame( const char *pName )
{
	return ::CompareString( LOCALE_SYSTEM_DEFAULT, NORM_IGNORECASE, m_Name, -1, pName, -1 ) == CSTR_EQUAL;
}


