

//-----------------------------------------------------------------------------------
// INCLUDE
//-----------------------------------------------------------------------------------
#include "Thread/Event.h"


//-----------------------------------------------------------------------------------
// NAMESPACE
//-----------------------------------------------------------------------------------
using namespace Selene;
using namespace Thread;


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CEvent::CEvent( Bool IsSignal, Sint32 Count )
{
	for ( Sint32 i = 0; i < MAXIMUM_WAIT_OBJECTS; i++ )
	{
		m_EventHandle[i] = NULL;
	}

	m_HandleCount = Count;
	for ( Sint32 i = 0; i < Count; i++ )
	{
		m_EventHandle[i] = ::CreateEvent( NULL, false, IsSignal, NULL );
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CEvent::~CEvent()
{
	for ( Sint32 i = 0; i < m_HandleCount; i++ )
	{
		::CloseHandle( m_EventHandle[i] );
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CEvent::Set( Sint32 No )
{
	if ( m_EventHandle[No] != NULL )
	{
		::SetEvent( m_EventHandle[No] );
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CEvent::Reset( Sint32 No )
{
	if ( m_EventHandle[No] != NULL )
	{
		::ResetEvent( m_EventHandle[No] );
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Bool CEvent::IsSignal( Sint32 No )
{
	Sint32 Ret = ::WaitForMultipleObjects( m_HandleCount, m_EventHandle, false, 0 );
	return Ret == No;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Bool CEvent::IsSignalAll( void )
{
	Sint32 Ret = ::WaitForMultipleObjects( m_HandleCount, m_EventHandle, true, 0 );
	return Ret != WAIT_TIMEOUT;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Sint32 CEvent::Wait( Sint32 TimeOut )
{
	Sint32 Ret = ::WaitForMultipleObjects( m_HandleCount, m_EventHandle, false, TimeOut == -1 ? INFINITE : TimeOut );
	return Ret == WAIT_TIMEOUT ? -1 : Ret - WAIT_OBJECT_0;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
HANDLE CEvent::GetHandle( Sint32 No )
{
	if ( No < 0 ) return NULL;
	if ( No >= m_HandleCount ) return NULL;

	return m_EventHandle[No];
}
